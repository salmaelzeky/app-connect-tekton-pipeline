BROKER SCHEMA esb.tawakkalna.auth.esqls

CREATE COMPUTE MODULE PrepareSessionManageSP
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- PRECALL MODULE
		-- Copy Entire Message
		CALL CopyEntireMessage();
		-- Declare request reference
		CREATE FIELD Environment.Variables.StoredProcedureRq.SessionManageRq;
		DECLARE Request REFERENCE TO Environment.Variables.StoredProcedureRq.SessionManageRq;
		-- Declare response reference
		CREATE FIELD Environment.Variables.StoredProcedureRs.SessionManageRs;
		DECLARE Response REFERENCE TO Environment.Variables.StoredProcedureRs.SessionManageRs;
		-- Input parameters preparation
		-- Set MSGID
		SET Request.MsgId = Environment.Variables.Header.MsgId;
		SET Request.RqUID = Environment.Variables.Header.RqUID;
--		SET Request.RqMode = Environment.Variables.FlowProperties.DebugMode;
		SET Request.SCId = Environment.Variables.Header.SCId;
		SET Request.UserId = Environment.Variables.Header.UserId;
		SET Request.SocialId = Environment.NationalId;
		-- SESSION MANAGE ESQL MODULE
		SET Request.ClientDate = Environment.Variables.Header.ClientDt;
		SET Request.DeviceId = Environment.Properties.DeviceSerialId;
		-- SET The Session Validity to 8 Hours
		SET Request.TimeToLife = Environment.Properties.TimeToLife;
		DECLARE MobileAppSchemaName CHARACTER Environment.Properties.MobileAppSchemaName;
		-- Stored Procedure parameters preparation
		CALL MANAGE_SESSION(
		Request.MsgId,
		COALESCE(Request.RqUID, ''),
		COALESCE(Request.DbgMd, ''),
		COALESCE(Request.SCId, ''),
		COALESCE(Request.FuncId, ''),
		COALESCE(Request.RqMode, ''),
		COALESCE(Request.CustLangPref, ''),
		Request.UserId,
		COALESCE(Request.ClientDate, ''),
		COALESCE(Request.SocialId, ''),
		COALESCE(Request.SecurityInfo, ''),
		COALESCE(Request.SecurityInfoType, ''),
		Response.StatusCode,
		Response.StatusDesc,
		Request.TimeToLife,
		COALESCE(Request.DeviceId, ''),
		COALESCE(Request.SessionParameter1, ''),
		COALESCE(Request.SessionParameter2, ''),
		COALESCE(Request.SessionParameter3, ''),
		COALESCE(Request.SessionParameter4, ''),
		COALESCE(Request.SessionParameter5, ''),
		Response.SessionId
		)IN Database.{MobileAppSchemaName};
		
		IF Response.StatusCode = 'I000000' THEN
		SET OutputRoot.JSON.MsgRsHdr.ResponseStatus.StatusCode = Response.StatusCode;
		SET OutputRoot.JSON.MsgRsHdr.ResponseStatus.StatusDesc = Response.StatusDesc;
		ELSE
			THROW USER EXCEPTION VALUES(Response.StatusCode,Response.StatusDesc);
		END IF;
		
		RETURN TRUE;
	END;
	--TODO: momkn n3mel haga zay - we can create a lib that has a stored procedure
	-- Stored Procedure Signature
	Create Procedure MANAGE_SESSION(
	IN P_MSG_ID CHARACTER,
	IN P_RQ_UID CHARACTER,
	IN P_DEBUG_MODE CHARACTER,
	IN P_SC_ID CHARACTER,
	IN P_FUN_ID CHARACTER,
	IN P_RQ_MODE CHARACTER,
	IN P_PREF_LANG CHARACTER,
	INOUT P_USER_ID CHARACTER,
	IN P_CLIENT_DATE CHARACTER,
	IN P_SOCIAL_ID CHARACTER,
	IN P_SEC_INFO CHARACTER,
	IN P_SEC_INFO_TYPE CHARACTER,
	OUT P_STATUS_CODE CHARACTER,
	OUT P_STATUS_DESC CHARACTER,
	INOUT P_TIME_TO_LIFE CHARACTER,
	IN P_DEVICE_ID CHARACTER,
	IN P_SESSION_PARAM01 CHARACTER,
	IN P_SESSION_PARAM02 CHARACTER,
	IN P_SESSION_PARAM03 CHARACTER,
	IN P_SESSION_PARAM04 CHARACTER,
	IN P_SESSION_PARAM05 CHARACTER,
	OUT P_SESSION_ID CHARACTER
	) LANGUAGE DATABASE
	EXTERNAL NAME "MANAGE_SESSION";

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;